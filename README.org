#+TITLE:Simple url shortener server in OCaml backed by postgres, using opium and caqti
#+DATE:2023-10-23
#+AUTHOR:Luke McPhee

As of the date of writing, there's not a lot of examples of examples available of webservers interacting with postgres using Caqti since it's recent update to version 2.x.
There are quite a few breaking changes in the major version bump so this repo provides some examples of usage. I've written a blog post that goes into a little more detail describing how everything fits together [[https://funwithfunctors.com/2023/11/01/simple-back-end-web-stack-in-ocaml-postgres-caqti-v2-opium/][here]] 
* Installing
All dependencies can be installed with

#+begin_src sh
opam install . --deps-only
#+end_src

* Running 

In all cases, start up postgres via docker 
#+begin_src sh
  ./nuke_docker_and_restart.sh
#+end_src
** Main server

#+begin_src sh
   dune exec -- shorty
#+end_src

** Testing without server via utop

#+begin_src sh
  dune utop . 
#+end_src

#+begin_src ocaml
  # open Repo;;

  # let run = let conn = Util.connect_exn () in
    let result = Db.insert conn "hello" "world" in
    Lwt_main.run result;;
    val run : (unit, [> Caqti_error.call_or_retrieve ]) result = Ok ()

  # let run = let conn = Util.connect_exn () in
    let result = Db.find_all conn  in
    Lwt_main.run result;;
    val run : (Db.Model.entry list, [> Caqti_error.call_or_retrieve ]) result =
      Ok
       [{Repo.Db.Model.short_url = "hello"; target_url = "vinnie"};
        {Repo.Db.Model.short_url = "hello"; target_url = "world"}]
#+end_src

** Running unit tests
#+begin_src sh
  dune runtests
#+end_src
